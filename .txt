DB_HOST=localhost
DB_DATABASE=EVENTOS
DB_USER=postgres
DB_PASSWORD=root
DB_PORT=5432

import DBConfig from './src/configs/DBConfig.js';
import pkg from 'pg'
const { Client, Pool } = pkg;

export default class EventRepository {
getAllAsync = async () => {
let returnArray = null;
const client = new Client(DBConfig);
console.log({client})
try {
await client.connect();
const sql = `SELECT * FROM public.events`;
const result = await client.query(sql);
await client.end();
returnArray = result.rows;
} catch (error) {
    console.error('Error al obtener eventos:', error.message, error.stack);
}
return returnArray;
}
getByIdAsync = async (id) => {  }
createAsync = async (entity) => {  }
updateAsync = async (entity) => {  }
deleteByIdAsync = async (id) => { }

}

	
import EventRepository from './event-repository.js';

export default class EventService {
    getAllAsync = async () => {
    const repo = new EventRepository();
    const returnArray = await repo.getAllAsync();
    return returnArray;
}

getByIdAsync = async (id) =>{ }
createAsync = async (entity) => { }
updateAsync = async (entity) => { }
deleteByIdAsync = async (id) => { }
}

import {Router} from 'express'
import EventService from './event-service.js'
const router = Router();
const svc = new EventService();

router.get('/', async (req, res) => {
    try {
      const returnArray = await svc.getAllAsync();
      if (returnArray != null) {
        return res.status(200).json(returnArray);
      } else { 
        return res.status(500).send('Error interno: retorno nulo');
      }
    } catch (error) {
      console.error('Error en getAllAsync:', error);
      return res.status(500).send('Error interno: ' + error.message);
    }
  });
  
router.get('/:id', async (req, res) => {  
  try {
    const returnArray = await svc.getAllAsync();
    if (returnArray != null) {
      return res.status(200).json(returnArray);
    } else { 
      return res.status(500).send('Error interno: retorno nulo');
    }
  } catch (error) {
    console.error('Error en getAllAsync:', error);
    return res.status(500).send('Error interno: ' + error.message);
  }
});
router.post('', async (req, res) => {  });
router.put('', async (req, res) => { });
router.delete('/:id', async (req, res) => { });

export default router;


DB_HOST=localhost
DB_DATABASE=EVENTOS
DB_USER=postgres
DB_PASSWORD=root
DB_PORT=5432
import 'dotenv/config'

const DBConfig = {
    host: process.env.DB_HOST?.trim() || 'localhost',
    database: process.env.DB_DATABASE?.trim() || 'EVENTOS',
    user: process.env.DB_USER?.trim() || 'postgres',
    password: process.env.DB_PASSWORD?.trim() || 'root',
    port: process.env.DB_PORT ? Number(process.env.DB_PORT) : 5432,
  }
  

export default DBConfig